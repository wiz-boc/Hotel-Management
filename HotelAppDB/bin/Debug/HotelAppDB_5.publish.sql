/*
Deployment script for HotelAppDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HotelAppDB"
:setvar DefaultFilePrefix "HotelAppDB"
:setvar DefaultDataPath "C:\Users\kenroyg\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\kenroyg\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Procedure [dbo].[spRoomtypes_GetById]...';


GO
CREATE PROCEDURE [dbo].[spRoomtypes_GetById]
	@Id int
AS
BEGIN
set nocount on;

SELECT [Id], [Title], [Description], [Price] 
FROM dbo.RoomTypes
WHERE ID =  @Id

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if not exists(select 1 from dbo.RoomTypes)
begin
    insert into dbo.RoomTypes(Title, Description, Price)
    values('King Size Bed','A room with a king-size bed and a window.',100),
    ('Two Queen Size Beds','A room with two queen-size beds and a window.',115),
    ('Executive Suite','Two rooms, each with a king size bed and a window.',205)
end


if not exists(select 1 from dbo.Rooms)
begin

declare @roomId1 int;
declare @roomId2 int;
declare @roomId3 int;

select @roomId1 = Id from dbo.RoomTypes where Title = 'King Size Bed'
select @roomId2 = Id from dbo.RoomTypes where Title = 'Two Queen Size Beds'
select @roomId3 = Id from dbo.RoomTypes where Title = 'Executive Suite'

insert into dbo.Rooms(RoomNumber,RoomTypeId)
values('001',@roomId1),
('002',@roomId2),
('003',@roomId2),
('004',@roomId3),
('101',@roomId3),
('102',@roomId3),
('204',@roomId1)
end
GO

GO
PRINT N'Update complete.';


GO
